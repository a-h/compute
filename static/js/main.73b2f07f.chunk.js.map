{"version":3,"sources":["features/counter/Counter.module.scss","features/counter/counterSlice.js","features/counter/Counter.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["module","exports","counterSlice","createSlice","name","initialState","index","questions","id","q","ec2","true","false","rationale","containers","lambda","reducers","next","state","length","previous","answer","payload","answers","Array","end","actions","selectIndex","counter","selectCount","selectQuestion","selectResult","result","i","selectEnd","Counter","useSelector","count","question","scores","isEnd","dispatch","useDispatch","baseProps","width","height","padding","colorScale","baseLabelStyles","fontFamily","fontSize","letterSpacing","fill","stroke","centeredLabelStyles","assign","textAnchor","victoryTheme","axis","style","strokeWidth","strokeLinecap","strokeLinejoin","axisLabel","grid","pointerEvents","ticks","size","tickLabels","bar","data","labels","className","styles","row","results","theme","domainPadding","x","scoresToData","y","domain","aria-label","onClick","disabled","progress","button","platform","score","App","configureStore","reducer","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.73b2f07f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Counter_row__34v4x\",\"progress\":\"Counter_progress__80EVw\",\"q-num\":\"Counter_q-num__2pqR1\",\"q-total\":\"Counter_q-total__1D1Br\",\"results\":\"Counter_results__3R0xi\",\"question\":\"Counter_question__QC8VJ\",\"button\":\"Counter_button__34Ak8\",\"button-back\":\"Counter_button-back__1vZld\",\"rationale\":\"Counter_rationale__3W8k8\",\"victory-chart\":\"Counter_victory-chart__USXvX\",\"VictoryContainer\":\"Counter_VictoryContainer__Eg5gz\"};","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const counterSlice = createSlice({\r\n  name: \"counter\",\r\n  initialState: {\r\n    index: 0,\r\n    questions: [\r\n      {\r\n        id: \"q1\",\r\n        q: `Do you want to reduce the amount of time that your team spend planning and designing infrastructure?`,\r\n        ec2: {\r\n          true: -1,\r\n          false: 0,\r\n          rationale: `VM infrastructure typically requires large amounts of up-front planning to configure storage and plan physical infrastructure.`,\r\n        },\r\n        containers: {\r\n          true: 1,\r\n          false: 0,\r\n          rationale: `Containers can reduce the amount of up-front planning, however, the use of complex container orchestration platforms such as Kubernetes can mean that the amount of reduction is reduced overall.`,\r\n        },\r\n        lambda: {\r\n          true: 2,\r\n          false: 0,\r\n          rationale: `Serverless architectures are typically focussed on service interactions, resulting in lower amounts of planning and design efforts.`,\r\n        },\r\n      },\r\n      {\r\n        id: \"q2\",\r\n        q:\r\n          \"Do you want to reduce the amount of time that your team spend patching servers?\",\r\n        ec2: {\r\n          true: -1,\r\n          false: 0,\r\n          rationale: `VM infrastructure offers minimal benefits, offering a platform to run operating systems on. Patching and maintenance is carried out with 3rd party desired state configuration tools such as Chef, Puppet, Ansible or Powershell DSC.`,\r\n        },\r\n        containers: {\r\n          true: 1,\r\n          false: 0,\r\n          rationale: `Use of a Serverless container platform such as AWS Fargate can reduce the amount of effort expended on server patching, however, the containers themselves may contain operating system dependencies, and require regular updates.`,\r\n        },\r\n        lambda: {\r\n          true: 3,\r\n          false: 0,\r\n          rationale: `Serverless applications use a fully managed operating system and container platform requiring no user management. The security of the platform is managed by AWS.`,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n  reducers: {\r\n    next: (state) => {\r\n      if(state.index == state.questions.length-1) {\r\n        return;\r\n      }\r\n      state.index += 1;\r\n    },\r\n    previous: (state) => {\r\n      if(state.index == 0) {\r\n        return;\r\n      }\r\n      state.index -= 1;\r\n    },\r\n    answer: (state, payload) => {\r\n      if (!state.answers || state.answers.length != state.questions.length) {\r\n        state.answers = new Array(state.questions.length);\r\n      }\r\n      state.answers[state.index] = payload.payload;\r\n      if(state.index == state.questions.length-1) {\r\n        state.end = true;\r\n        return;\r\n      }\r\n      state.index += 1;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { next, previous, answer } = counterSlice.actions;\r\n\r\nexport const selectIndex = state => state.counter.index;\r\nexport const selectCount = state => state.counter.questions.length;\r\nexport const selectQuestion = state => state.counter.questions[state.counter.index];\r\nexport const selectResult = state => {\r\n  const result = {\r\n    ec2: 0,\r\n    containers: 0,\r\n    lambda: 0,\r\n  };\r\n  if(!state.counter.answers) {\r\n    return result;\r\n  }\r\n  for(let i = 0; i < state.counter.answers.length; i ++) {\r\n    const answer = state.counter.answers[i]\r\n    const q = state.counter.questions[i];\r\n    result.ec2 += q.ec2[answer] || 0;\r\n    result.containers += q.containers[answer] || 0;\r\n    result.lambda += q.containers[answer] || 0;\r\n  }\r\n  return result;\r\n};\r\nexport const selectEnd = state => state.counter.end || false;\r\n\r\nexport default counterSlice.reducer;\r\n","import React, { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  previous,\r\n  answer,\r\n  selectIndex,\r\n  selectCount,\r\n  selectQuestion,\r\n  selectResult,\r\n  selectEnd,\r\n} from \"./counterSlice\";\r\nimport { VictoryBar, VictoryChart } from \"victory\";\r\nimport styles from \"./Counter.module.scss\";\r\nimport { assign } from \"lodash\";\r\n\r\nexport function Counter() {\r\n  const index = useSelector(selectIndex);\r\n  const count = useSelector(selectCount);\r\n  const question = useSelector(selectQuestion);\r\n  const scores = useSelector(selectResult);\r\n  const isEnd = useSelector(selectEnd);\r\n  const dispatch = useDispatch();\r\n\r\n  // --- Basic Victory chart theming ---\r\n  \r\n  // Colours\r\n  const colors = [\r\n    \"#252525\",\r\n    \"#525252\",\r\n    \"#737373\",\r\n    \"#969696\",\r\n    \"#bdbdbd\",\r\n    \"#d9d9d9\",\r\n    \"#f0f0f0\"\r\n  ];\r\n  const black = '#222222';\r\n  const greyMid = '#747474';\r\n  const greyLight = '#d4d4d4';\r\n  const whiteOff = '#f4f7f5';\r\n  const white = '#ffffff';\r\n  const orange = '#ff6100';\r\n  \r\n  // Typography\r\n  const sansSerif = \"'Inter', sans-serif\";\r\n  const letterSpacing = \"normal\";\r\n  const fontSize = 14;\r\n  \r\n  // Layout\r\n  const baseProps = {\r\n    width: 450,\r\n    height: 300,\r\n    padding: 50,\r\n    colorScale: colors\r\n  };\r\n\r\n  // Labels\r\n  const baseLabelStyles = {\r\n    fontFamily: sansSerif,\r\n    fontSize,\r\n    letterSpacing,\r\n    padding: 10,\r\n    fill: black,\r\n    stroke: \"transparent\"\r\n  };\r\n  const centeredLabelStyles = assign({ textAnchor: \"middle\" }, baseLabelStyles);\r\n\r\n  // Strokes\r\n  const strokeLinecap = \"round\";\r\n  const strokeLinejoin = \"round\";\r\n\r\n  // Construct theme\r\n\r\n  const victoryTheme = {\r\n    axis: assign(\r\n      {\r\n        style: {\r\n          axis: {\r\n            fill: \"transparent\",\r\n            stroke: greyMid,\r\n            strokeWidth: 1,\r\n            strokeLinecap,\r\n            strokeLinejoin\r\n          },\r\n          axisLabel: assign({}, centeredLabelStyles, {\r\n            padding: 25\r\n          }),\r\n          grid: {\r\n            fill: \"none\",\r\n            stroke: \"none\",\r\n            pointerEvents: \"painted\"\r\n          },\r\n          ticks: {\r\n            fill: \"transparent\",\r\n            size: 1,\r\n            stroke: \"transparent\"\r\n          },\r\n          tickLabels: baseLabelStyles\r\n        }\r\n      },\r\n      baseProps\r\n    ),\r\n    bar: assign(\r\n      {\r\n        style: {\r\n          data: {\r\n            fill: orange,\r\n            padding: 20,\r\n            strokeWidth: 0\r\n          },\r\n          labels: baseLabelStyles\r\n        }\r\n      },\r\n      baseProps\r\n    )\r\n  }\r\n\r\n  // --- /theme ---\r\n\r\n  if (isEnd) {\r\n    return (\r\n      <div>\r\n        <header className=\"app-header\">\r\n          <div className={styles.row}>\r\n            <h1 className={styles.results}>Your results...</h1>\r\n          </div>\r\n        </header>\r\n        <article className=\"app-article\">\r\n          <div className={styles.row} style={{ width: 400 }}>\r\n            <VictoryChart theme={victoryTheme} domainPadding={{ x: 20 }}>\r\n              <VictoryBar\r\n                data={scoresToData(scores)}\r\n                x=\"platform\"\r\n                y=\"score\"\r\n                domain={{ y: [-10, 25] }}\r\n              />\r\n            </VictoryChart>\r\n          </div>\r\n        </article>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <header className=\"app-header\">\r\n        <div className={styles.row}>\r\n          <button\r\n            className={styles['button-back']}\r\n            aria-label=\"Back\"\r\n            onClick={() => dispatch(previous())}\r\n            disabled={index === 0 ? true : false}\r\n          >\r\n            Back\r\n          </button>\r\n        </div>\r\n        <div className={styles.row}>\r\n          <h1 className={styles.progress}>\r\n            Question <span className={styles['q-num']}>{index + 1}</span> of <span className={styles['q-total']}>{count}</span>\r\n          </h1>\r\n        </div>\r\n      </header>\r\n      <article className=\"app-article\">\r\n        <div className={`${styles.row} question`}>\r\n          <h2 className={styles.question}>{question.q}</h2>\r\n        </div>\r\n        <div className={styles.row}>\r\n          <button\r\n            className={styles.button}\r\n            aria-label=\"No\"\r\n            onClick={() => dispatch(answer(false))}\r\n            >\r\n            No\r\n          </button>\r\n          <button\r\n            className={styles.button}\r\n            aria-label=\"Yes\"\r\n            onClick={() => dispatch(answer(true))}\r\n          >\r\n            Yes\r\n          </button>\r\n        </div>\r\n      </article>\r\n      <aside className=\"app-aside\">\r\n        <div className={styles.row}>\r\n          <dl className={styles.rationale}>\r\n            <dt><h3>EC2</h3></dt>\r\n            <dd>{question.ec2.rationale}</dd>\r\n            <dt><h3>Containers</h3></dt>\r\n            <dd>{question.containers.rationale}</dd>\r\n            <dt><h3>Serverless</h3></dt>\r\n            <dd>{question.lambda.rationale}</dd>\r\n          </dl>\r\n        </div>\r\n      </aside>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst scoresToData = (scores) => [\r\n  {\r\n    platform: \"ec2\",\r\n    score: scores.ec2,\r\n  },\r\n  {\r\n    platform: \"containers\",\r\n    score: scores.containers,\r\n  },\r\n  {\r\n    platform: \"lambda\",\r\n    score: scores.lambda,\r\n  },\r\n];\r\n","import React from 'react';\r\nimport { Counter } from './features/counter/Counter';\r\nimport './App.scss';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"app\">\r\n      <Counter />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}